# Object-Oriented Programming Concepts - Sample study note generated by AI

## What is Object-Oriented Programming?
OOP is a programming approach that organizes code around objects rather than functions. An object contains both data (attributes) and methods (functions) that work with that data. Think of it like a blueprint for creating things.

## Four Main Principles

- **Encapsulation**: Bundling data and methods together in a class. We hide internal details and only expose what's necessary. Like a car - you use the steering wheel and pedals, but don't need to know how the engine works internally.
- **Inheritance**: Creating new classes based on existing ones. The new class gets all features of the parent class and can add its own. Example: Animal class has eat() method, Dog class inherits from Animal and adds bark() method.
- **Polymorphism**: Same method name can behave differently in different classes. A draw() method works differently for Circle, Rectangle, and Triangle classes, but they all draw shapes.
- **Abstraction**: Focusing on essential features while hiding complex implementation details. We know what a method does without caring about how it does it.

## Classes vs Objects

Class is like a blueprint or template. Object is an actual instance created from that class. One Person class can create many person objects like john, mary, alex.

## Benefits of OOP
- Code reusability through inheritance
- Easier to maintain and modify
- Better organization of complex programs
- Matches real-world thinking patterns
- Team development becomes easier

## Common Mistakes to Avoid
- Making everything public instead of using proper access modifiers
- Creating classes that try to do too many things
- Not using inheritance when it would be helpful
- Overcomplicating simple problems with unnecessary objects

## Key Terms 
- **Constructor** - special method that runs when object is created 
- **Method overriding** - child class changes parent's method behavior 
- **Interface** - contract that classes must follow 
- **Static methods** - belong to class, not individual objects

## Example Structure

```java
class Student {
    private String name;
    private int age;
    
    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public void study() {
        System.out.println(name + " is studying");
    }
}
```