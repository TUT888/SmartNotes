**QUESTION 1:** What is the primary difference between an ArrayList and a LinkedList in terms of memory usage?
**OPTION A:** ArrayList uses a contiguous memory allocation, while LinkedList uses a non-contiguous memory allocation.
**OPTION B:** ArrayList uses a non-contiguous memory allocation, while LinkedList uses a contiguous memory allocation.
**OPTION C:** ArrayList uses a dynamic array, while LinkedList uses a fixed size array.
**OPTION D:** Both ArrayList and LinkedList use the same type of memory allocation.

**ANS:** A

**QUESTION 2:** Which operation on an ArrayList is considered to be the fastest?
**OPTION A:** Accessing an element by its index.
**OPTION B:** Inserting an element at the beginning of the list.
**OPTION C:** Removing an element at the end of the list.
**OPTION D:** Inserting an element at a specific index.

**ANS:** A

**QUESTION 3:**  What is a key advantage of a LinkedList over an ArrayList in terms of insertion/deletion operations?
**OPTION A:** LinkedList is faster for random access operations.
**OPTION B:** LinkedList is faster for accessing elements at the beginning and end.
**OPTION C:** LinkedList is faster for insertion/deletion operations at the beginning and end.
**OPTION D:** LinkedList is faster for insertion/deletion operations at arbitrary positions.

**ANS:** B

**QUESTION 4:** Which of the following operations on a LinkedList would be the most time-consuming?
**OPTION A:** Accessing an element by its index.
**OPTION B:** Removing an element from the beginning of the list.
**OPTION C:** Inserting an element at the end of the list.
**OPTION D:** Searching for an element within the list.

**ANS:** D

**QUESTION 5:** When is it recommended to use ArrayList?
**OPTION A:** When frequent insertions and deletions are required at the beginning and end.
**OPTION B:** When random access is a primary concern.
**OPTION C:** When memory efficiency is a priority.
**OPTION D:** When performance in insertion/deletion operations is not critical.

**ANS:** B

**QUESTION 6:** What is the time complexity of removing an element at a specific index in an ArrayList?
**OPTION A:** O(1)
**OPTION B:** O(n)
**OPTION C:** O(log n)
**OPTION D:** O(n log n)

**ANS:** B 
